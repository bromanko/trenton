name: Core
on:
  push:
    paths:
    - 'core/**'
    - '.go/core/**'
    - '.github/workflows/core.yaml'

env:
  GCR_RW_TOKEN: ${{ secrets.GCR_RW_TOKEN }}
  GCLOUD_AUTH: ${{ secrets.GCLOUD_AUTH }}
  GCLOUD_PROJECT: trenton-production-c5cb9af5
  GOOGLE_APPLICATION_CREDENTIALS: /home/github/actions-runner/_work/trenton/trenton/.gcloud_auth.json

jobs:
#  utest:
#    name: Run unit tests
#    runs-on: self-hosted
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v1
#    - name: GCloud login
#      run: |
#        echo "${GCLOUD_AUTH}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
#        gcloud auth activate-service-account --project=${GCLOUD_PROJECT} --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
#    - name: Docker login
#      run: echo $GCR_RW_TOKEN | docker login -u _json_key --password-stdin gcr.io
#    - name: Write .env file
#      run: cd core && sops -d .config/ci.enc.env > .env
#    - name: Run unit tests
#      run: ./go core test
#    - uses: colpal/actions-clean@v1
#      if: ${{ always() }}
#
#  itest:
#    name: Run integration tests locally
#    needs: [utest]
#    runs-on: self-hosted
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v1
#    - name: GCloud login
#      run: |
#        echo "${GCLOUD_AUTH}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
#        gcloud auth activate-service-account --project=${GCLOUD_PROJECT} --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
#    - name: Docker login
#      run: echo $GCR_RW_TOKEN | docker login -u _json_key --password-stdin gcr.io
#    - name: Write .env file
#      run: cd core && sops -d .config/ci.enc.env > .env
#    - name: Start development server
#      run: |
#        cat core/.env
#        ./go core start -d
#        echo "Waiting for server to start to get some logs..."
#        sleep 3m
#        cd core
#        docker-compose logs server
#    - name: Run integration tests
#      env:
#        TEST_SERVER_BASE: http://server
#        TEST_SERVER_PORT: 5000
#      run: ./go core itest
#    - uses: colpal/actions-clean@v1
#      if: ${{ always() }}
#
#  publish:
#    name: Publish Docker image
#    needs: [utest, itest]
#    if: endsWith(github.ref, 'master')
#    runs-on: self-hosted
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v1
#    - name: Docker login
#      run: echo $GCR_RW_TOKEN | docker login -u _json_key --password-stdin gcr.io
#    - name: Publish Docker image
#      run: ./go core publish
#    - uses: colpal/actions-clean@v1
#      if: ${{ always() }}

  deploy:
    name: Deploy
#    needs: [publish]
#    if: endsWith(github.ref, 'master')
    runs-on: self-hosted
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: GCloud login
      run: |
        echo "${GCLOUD_AUTH}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
        gcloud auth activate-service-account --project=${GCLOUD_PROJECT} --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
    - name: Configure kubectl
      run: |
        touch .kubeconfig
        echo "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJWekNCL3FBREFnRUNBZ0VBTUFvR0NDcUdTTTQ5QkFNQ01DTXhJVEFmQmdOVkJBTU1HR3N6Y3kxelpYSjIKWlhJdFkyRkFNVFU1TlRZd05qUXdOakFlRncweU1EQTNNalF4TmpBd01EWmFGdzB6TURBM01qSXhOakF3TURaYQpNQ014SVRBZkJnTlZCQU1NR0dzemN5MXpaWEoyWlhJdFkyRkFNVFU1TlRZd05qUXdOakJaTUJNR0J5cUdTTTQ5CkFnRUdDQ3FHU000OUF3RUhBMElBQkRRTTJWa3ErN3BOMVduWFkwMkcrVmtSWVE0SFBqSUw5YUF1NTl4bTVPeVEKMnNmZlpYckZGTWE3MEt6cEdIUGkyL09pTEpFR2lhd3FpOEJzYXRKSWJWaWpJekFoTUE0R0ExVWREd0VCL3dRRQpBd0lDcERBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSVFEVFFSaWJwQkszCnFpZ3JLSEc5UXpnbzVjMXNlUG1ueDJMQWRCM29iQ1BNdEFJZ044aHVoTjdDS1p5VW14U1RrWkNoLzBBbUJGWlUKaC90cHJ4cHhTNVJTaHhFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" > .kube.ca.crt
        kubectl --kubeconfig=.kubeconfig config set-cluster seemy.app \
          --server=https://k3s.seemy.app:6443 \
          --certificate-authority=.kube.ca.crt
        kubectl --kubeconfig=.kubeconfig config set-credentials cluster-admin \
          --username=admin --password=${{ secrets.K3S_PASSWORD }}
        kubectl --kubeconfig=.kubeconfig config set-context seemy.app \
          --cluster=seemy.app --user=cluster-admin
    - name: Deploy
      env:
        KUBECONFIG: .kubeconfig
      run: ./go helm deploy webhooks ${GITHUB_SHA} production trenton
    - uses: colpal/actions-clean@v1
      if: ${{ always() }}
