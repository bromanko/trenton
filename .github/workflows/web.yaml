name: Web
on:
  push:
    paths:
    - 'core/**'
    - '.go/core/**'
    - '.github/workflows/web.yaml'
    - 'helm/web/**'
    - 'helm_vars/web/**'

env:
  GCLOUD_AUTH: ${{ secrets.GCLOUD_AUTH }}
  GCLOUD_PROJECT: trenton-production-c5cb9af5

jobs:
  utest:
    name: Run unit tests
    # There is an issue running msbuild in Docker on the latest ubuntu kernel.
    runs-on: ubuntu-16.04
    env:
      GOOGLE_APPLICATION_CREDENTIALS: /home/runner/.gcloud_auth.json
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: GCloud login
      run: |
        echo "${GCLOUD_AUTH}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
        gcloud auth activate-service-account --project=${GCLOUD_PROJECT} --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
    - name: Docker login
      run: echo $GCLOUD_AUTH | docker login -u _json_key --password-stdin us-central1-docker.pkg.dev
    - name: Install sops
      run: |
        sudo curl -fsSL https://github.com/mozilla/sops/releases/download/3.4.0/sops-3.4.0.linux -o /usr/local/bin/sops
        sudo chmod +x /usr/local/bin/sops
    - name: Write .env file
      run: cd core && sops -d .config/ci.enc.env > .env
#    - name: Run unit tests
#      run: ./go webhooks test
    - uses: colpal/actions-clean@v1
      if: ${{ always() }}

  itest:
    name: Run integration tests locally
    # There is an issue running msbuild in Docker on the latest ubuntu kernel.
    runs-on: ubuntu-16.04
    env:
      GOOGLE_APPLICATION_CREDENTIALS: /home/runner/.gcloud_auth.json
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: GCloud login
      run: |
        echo "${GCLOUD_AUTH}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
        gcloud auth activate-service-account --project=${GCLOUD_PROJECT} --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
    - name: Docker login
      run: echo $GCLOUD_AUTH | docker login -u _json_key --password-stdin us-central1-docker.pkg.dev
    - name: Install sops
      run: |
        sudo curl -fsSL https://github.com/mozilla/sops/releases/download/3.4.0/sops-3.4.0.linux -o /usr/local/bin/sops
        sudo chmod +x /usr/local/bin/sops
    - name: Write .env file
      run: |
        cd core && sops -d .config/ci.enc.env > .env
        cat .env
    - name: Build development server
      run: ./go web build
    - name: Start development server
      run: ./go web start -d > .server-container
    - name: Run integration tests
      run: ./go web itest
    - name: Stop development server
      if: ${{ always() }}
      run: |
        [[ -f .server-container ]] && docker logs $(cat .server-container)
        [[ -f .server-container ]] && docker stop $(cat .server-container)
    - uses: colpal/actions-clean@v1
      if: ${{ always() }}

  publish:
    name: Publish Docker image
    needs: [utest, itest]
    if: endsWith(github.ref, 'master')
    # There is an issue running msbuild in Docker on the latest ubuntu kernel.
    runs-on: ubuntu-16.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: Docker login
      run: echo $GCLOUD_AUTH | docker login -u _json_key --password-stdin us-central1-docker.pkg.dev
    - name: Build Docker image
      run: ./go web build
    - name: Publish Docker image
      run: ./go web publish
    - uses: colpal/actions-clean@v1
      if: ${{ always() }}

  deploy:
    name: Deploy
    needs: [publish]
    if: endsWith(github.ref, 'master')
    runs-on: self-hosted
    env:
      GOOGLE_APPLICATION_CREDENTIALS: /home/github/actions-runner/_work/trenton/trenton/.gcloud_auth.json
    steps:
    - name: Checkout code
      uses: actions/checkout@v1
    - name: GCloud login
      run: |
        echo "${GCLOUD_AUTH}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
        gcloud auth activate-service-account --project=${GCLOUD_PROJECT} --key-file="${GOOGLE_APPLICATION_CREDENTIALS}"
    - name: Configure kubectl
      env:
        K3S_PASSWORD: ${{ secrets.K3S_PASSWORD }}
      run: .github/scripts/configure-kubectl.sh
    - name: Deploy
      run: |
        export KUBECONFIG=$GITHUB_WORKSPACE/.kubeconfig
        kubectl config current-context
        ./go helm deploy web ${GITHUB_SHA} production trenton
    - uses: colpal/actions-clean@v1
      if: ${{ always() }}
